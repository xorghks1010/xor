<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	
	<!-- 
		코드기반 트랜잭션 처리와
		@Transactional 애노테이션을 이용한 선언적 트랜잭션 처리하기
	-->
	
	<!-- 
		스프링 설정 파일을 분할하여 작성하고 import 태그를 사용해 포함 시킨다.
		
		dbcpdatasource.xml :
		DBCP 정보를 properties 파일로부터 읽어 DataSource를 구하는 설정 파일
	-->
	<import resource="classpath:datasource/dbcpdatasource.xml" />
	
	<!-- 
		스프링 설정 파일을 분할하여 작성하고 import 태그를 사용해 포함 시킨다.
		
		JNDI 방식의 DBCP를 참조해 DataSource를 구하는 설정 파일
		JNDI를 이용한 DBCP DataSource 설정은 아래의
		dacpdatasource_jndi.xml 파일의 주석을 참고하기 바란다.
	-->
	<!-- 
		<import resource="classpath:datasource/dbcpdatasource_jndi.xml" />
 	-->
	
	<!-- 
		마이바티스와 스프링을 연동한 @Transactional을 이용한 트랜잭션 처리
		
		1. MyBatis3 프레임워크를 사용하기 위한 라이브러리 의존 설정
		
		2. MyBatis3 프레임워크와 스프링프레임워크 연동을 위한 라이브러리 의존 설정
		
		3. MyBatis 설정 파일 작성(mybatis-config.xml, 생략가능)		
		
		4. SQL을 분리한 Mapper 작성(Mapper XML 또는 Mapper Interface)	
		
		5. 마이바티스를 이용한 DAO 구현
		  - SqlSession 구현체 SqlSessionTemplate을 이용한 구현			
		  - 매퍼(Mapper Interface) 동적생성을 이용한 구현
		  
		6. SqlSessionFactory 생성을 위한 SqlSessionFactoryBean을
		  Spring Bean으로 정의
		  
		7. DAO에서 의존하는 SqlSessionTemplate을 Spring Bean으로 정의 
		
		8. 스프링이 지원하는 TransactionManager를 Spring Bean으로 정의	
				
		9. <tx:annotation-triven />을 설정해 애노테이션 기반 트랜잭션 적용
		
		10. 트랜잭션을 처리할 Service 클래스의 메서드에 @Transactional
		    애노테이션 적용하고 트랜잭션 속성을 설정
		    
		9. 코드기반 트랜잭션을 처리하기 위해서는 스프링이 지원하는 
		   TransactionTemplate을 Spring Bean으로 정의
		   
		10. Service 클래스에서 TransactionTemplate을 이용해 코드로 트랜잭션 처리      
		    
		11. Commons FileUpload API를 지원하기 위해 스프링프레임워크가
		   제공하는 CommonsMultipartResolver를 Bean으로 정의		    
	-->
	
	<!-- 		
		1. MyBatis3 프레임워크를 사용하기 위한 라이브러리 의존 설정
		
		MyBatis3 프레임워크를 사용하기 위해서는 mybatis 모듈을 아래와 같이 
		pom.xml에 라이브러리 의존 설정을 해야 한다.		
		
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.5</version>
		</dependency> 
	-->
	
	<!--	
		2. MyBatis3 프레임워크와 스프링프레임워크 연동을 위한 라이브러리 의존 설정
		
		스프링과 마이바티스를 연동하기 위해서는 마이바티스에서 지원하는 스프링
		연동 모듈을 아래와 같이 pom.xml에 라이브러리 의존 설정을 해야 한다.
		
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.1</version>
		</dependency>
		
		마이바티스와 스프링프레임워크를 연동하기 위해서는 DataSource와
		스프링이 지원하는 TransactionManager 등이 스프링 빈으로 정의되어
		있어야 한다. 
	-->
	
	<!--
		3. MyBatis 설정 파일 작성(mybatis-config.xml, 생략가능)
		
		MyBatis는 SQL Mapping 프레임워크로 별도의 설정 파일을 가질 수 있다.
		스프링프레임워크와 MyBatis를 연동할 경우 MyBatis 설정이 필수적으로 필요한
		것은 아니지만 MyBatis에서 추가적으로 필요한 부분을 지정할 수 있다.
		이 MyBatis 설정 파일에는 DB의 접속 주소(별도 설정 가능)나 매핑(Mapper)
		파일의 경로, 도메인 객체의 별칭, TransactionManager, DBCP 등의 정보를
		설정할 수 있다. 일반적으로 "src/main/resources" 폴더에 mybatis-config.xml
		파일을 작성한다. 별도의 MyBatis 설정이 필요없다고 해도 나중을 위해 
		mybatis-config.xml 파일을 만들어 두는 것이 좋다.
		
		참고로 우리의 예제는 mybatis-config.xml 파일은 사용하지 않는다.
		하지만 프로젝트의 src/main/resources/mybatis-config_참고.xml
		파일의 주석은 참고 삼아 꼭 한 번 읽어보기 바란다.		
	-->
	<!--
		4. SQL을 분리한 Mapper 작성(Mapper XML 또는 Mapper Interface)
		  일반적으로 Mapper 설정 파일은 "src/main/resources" 폴더에 작성하거나
		  이 폴더에 새로운 폴더를 추가해 작성하면 되며 Mapper Interface는 
		  "src/main/java"에 패키지를 추가해 작성하면 된다.	
	-->
	
	<!--			
		5. 마이바티스를 이용한 DAO 구현
		  - SqlSession 구현체 SqlSessionTemplate을 이용한 구현			
		  - 매퍼(Mapper Interface를) 동적생성을 이용한 구현
		  
		  mybatis와 스프링을 연동해 DAO를 구현할 경우 MyBtis Mapper에서
		  매핑 구문을 호출해 SQL을 실행하게 되는데 이 매핑 구문을 호출하는 역할을
		  담당하는 객체가 SqlSessionTemplate 이다. 이 SqlSessionTemplate을
		  Spring Bean으로 정의하고 스프링으로 부터 주입 받아 사용할 수 있도록 
		  DAO에서 와이어링 설정을 추가하면 된다. 
		  SqlSessionTemplate은 실제 SQL 발행이나 트랜잭션을 관리하는 객체 이다.
	-->	
	
	<!--  
		6. SqlSessionFactory 생성을 위한 SqlSessionFactoryBean을 Spring Bean으로 정의
		  
		  SqlSessionFactory 객체는 MyBatis와 스프링프레임워크 연동에서 핵심적인
		  객체로 MyBatis의 전반적인 정보를 가지고 있는 객체이다. 
		  이 객체는 DB Connection을 생성하고 관리하며 SQL 실행에 대한 모든 것을
		  처리하는 객체로 SqlSessionFactoryBean을 통해 SqlSessionFactory
		  객체를 한 번만 생성해 사용한다.
	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--
			DBCP를 사용하기 위한 DataSource를 참조 한다.
		-->
		<property name="dataSource" ref="dataSource" />
		
		<!--  
			추가로 MyBatis 설정이 필요하다면 설정 파일의 위치를 지정할 수 있다.
			MyBatis 설정 파일에서 <environments>, <mappers>, <typeAliases>
			요소만 사용했다면 configLocation은 생략할 수 있다.
			
			이번 예제는 스프링에서 제공하는 DataSource와 TransactionManager를
			사용하기 때문에 MyBatis 설정인 mybatis-config.xml은 사용하지 않는다.
			 
			이 설정을 사용하지 않으면 <settings> 요소의 설정을 사용할 수 없기 
			때문에 테이블을 조회할 때 아래와 같이 컬럼명에 별칭을 사용해서 도메인 
			객체의 프로퍼티와 일치 시켜야 한다.
			
			SELECT product_code AS productCode FROM product
			
			스프링과 MyBatis를 연동할 경우 MyBatis 설정 파일인 
			mybatis-config.xml은 필수가 아니기 때문에 생략할 수  있다.
			우리의 예제도 Mybatis 설정 파일은 사용하지 않는다. 하지만 프로젝트의
			mybatis-config_참고.xml의 주석은 참고 삼아 꼭 한 번 읽어보기 바란다.
		-->
		 
		<!--
			<property name="configLocation" value="classpath:mybatis-config.xml" />
		-->
				
		<!--
			MyBatis가 동작하면 Mapper를 인식해야 정상적인 DB 작업을 할 수 있다.
			아래와 같이 SqlSessionFactory의 mapperLocations 프로퍼티로
			지정할 수 있다. 아래와 같이 지정하면 "repository/mappers/"를 포함한
			하부 폴더의 "Mapper.xml"로 끝나는 파일을 Mapper로 인식하게 된다.
		-->
		<property name="mapperLocations" 
			value="classpath:repository/mappers/**/*Mapper.xml" />
					
		<!--
			Mapper 설정이 여러 곳에 나누어져 있을 때 아래와 같이 list에 지정할
			수도 있다. 
		-->		
		<!-- 
		<property name="mapperLocations">
			<list>
				<value>classpath:repository/mappers/BoardMapper.xml</value>				
				<value>classpath:repository/mappers/MemberMapper.xml</value>
			</list>
		</property>
		-->
		
		<!-- 
			typeAliasesPackage 속성은 Mapper 설정에서 타입 별칭을 사용할
			클래스가 위치한 패키지를 지정하는데 사용한다. 이 속성에 지정한
			패키지를 자동으로 검색해 클래스 이름으로 타입 별칭을 사용할 수 있도록
			해 준다. 아래와 같이 typeAliasesPackage를 지정하면 value에 지정한
			패키지를 포함한 하부 패키지의 모든 클래스를 완전한 클래스 이름이 아닌 
			클래스 이름만 지정하여 사용할 수 있도록 해 준다. 만약 이를 설정하지 않으면
			Mapper 설정에서 타입을 지정할 때 패키지를 포함한 완전한 클래스 이름으로
			지정해야 한다.			
		-->		
		<property name="typeAliasesPackage" 
			value="com.springstudy.bbs.domain" />
		
		<!--
		 	typeAliases 속성은 Mapper 설정에서 완전한 클래스 이름 대신 별칭을 사용할
		 	클래스 목록을 지정할 때 사용한다. 
		 	typeAliases에 지정한 클래스에 @Alias("Board") 애노테이션을 적용하면
		 	Mapper 설정에서 Board 라는 별칭으로 타입을 지정할 수 있다.
		-->	
		<!-- 	
		<property name="typeAliases">
			<list>
				<value>com.springstudy.bbs.domain.Board</value>
				<value>com.springstudy.bbs.domain.Member</value>
			</list>
		</property>
		-->			
	</bean>
	
	<!-- 
		7. DAO에서 의존하는 SqlSessionTemplate을 Spring Bean으로 정의
				
		mybatis-spring 모듈은 MyBatis의 SqlSession 기능과 스프링 DB 지원 기능을
		연동해 주는 SqlSessionTemplate 클래스를 제공한다. SqlSessionTemplate은
		SqlSession을 구현해 스프링과 연동하는 기능을 구현했기 때문에 우리가 만드는
		DAO에서 SqlSessionTemplate 객체를 사용해 SqlSession에 정의된 메서드를
		사용할 수 있다.
		
		SqlSession과 SqlSessionTemplate는 같은 역할을 담당하고 있지만 트랜잭션 
		처리에서 다른 부분이 있다. SqlSession은 commit(), rollback() 메서드를
		명시적으로 호출해 트랜잭션을 처리 하지만 SqlSessionTemplate은 스프링이 
		트랜잭션을 처리할 수 있도록 구현되어 있기 때문에 별도로 commit(), rollback()
		메서드를 호출할 필요가 없다.
	-->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"
		c:sqlSessionFactory-ref="sqlSessionFactory" />

	<!--  
		8. 스프링이 지원하는 TransactionManager를 Spring Bean으로 정의(생략 가능)
		
		마이바티스는 JDBC 기반이기 때문에 DataSourceTransactionManager를
		이용해 다음과 같은 방식의 트랜잭션을 처리할 수 있다.
		
		tx 네임스페이스를 이용한 트랜잭션 처리
		@Transactional 애노테이션을 이용한 트랜잭션 처리
	
		## 트랜잭션 매니저 정의하기 ##
		스프링은 트랜잭션 처리를 위해 PlatformTransactionManager 인터페이스를
		통해 추상화 하고 각각의 DB 연동 기술에 따라서 PlatformTransactionManager
		구현 클래스를 아래와 같이 제공하고 있다.
		
		JDBC 기반 : DataSourceTransactionManager
		하이버네이트 : HibernateTransactionManager
		JPA : JpaTransactionManager
		JTA : JtaTransactionManager
		
		아래는 JDBC 기반 DB 연동기술을 사용하는 스프링 DB 지원 템플릿 클래스
		(JdbcTemplate 등)를 사용하거나 MyBatis를 사용할 경우 트랜잭션 매니저 설정이다. 
		
		DBCP를 사용하기 위한 DataSource를 참조 한다.
	-->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager" 
		p:dataSource-ref="dataSource" />

	<!--
		9. @Transactional 애노테이션을 이용한 트랜잭션 처리를 위해
		   <tx:annotation-triven /> 설정
		   
		스프링의 선언적 트랜잭션은 TransactionTemplate 클래스를 이용해 코드에서
		직접 처리하지 않고 설정 파일이나 애노테이션으로 트랜잭션의 범위와 롤백 규칙
		등을 지정하여 트랜잭션을 처리할 수 있다. 스프링이 지원하는 선언적 트랜잭션 처리는
		tx 네임스페이스를 이용한 트랜잭션 처리와 @Transactional 애노테이션을 이용한
		트랜잭션 처리가 있으며 아래의 설정은 @Transactional 애노테이션을 이용해
		트랜잭션을 처리하기 위한 설정이다.	
					
		@Transactional 애노테이션을 이용한 트랜잭션 처리는 아주 간단하다.
		트랜잭션을 적용할 클래스나 메서드에 @Transactional()만 기술하고
		이 애노테이션의 () 안에 트랜잭션 관련 속성을 설정하기만 하면 된다. 
		그리고 빈 설정에서 아래와 같이 트랜잭션을 애노테이션으로 처리한다는
		태그를 기술하고 트랜잭션 매니저를 지정하면 된다.
		이 태그에 지정할 수 있는 속성은 아래와 같다.
		
		* transaction-manager : PlatformTransactionManager 
			구현체 클래스의 빈의 이름을 지정하면 된다.
		
		* proxy-target-class : 클래스의 프록시 객체를 어떻게 생성할지 여부를
			지정한다. true를 지정하면 CGLIB 라이브러리를 이용해 프록시를
			생성하고 false를 지정하면 JDK 동적 프록시를 이용해 프록시를 생성한다.
		
		* order : Advice 적용 순서를 지정한다. 기본 값은 가장 낮은 순위 이다.
		
		aspectjrt, aspectjtools, aspectjweaver 라이브러리가 필요하기
		때문에 메이븐을 사용해 라이브러리 의존성을 해결해야 한다.
		스프링의 선언적 트랜잭션은 AOP를 사용하기 때문에 tx 네임스페이스를 이용한
		트랜잭션 처리나 @Transaction 애노테이션을 이용한 트랜잭션은 트랜잭션
		처리를 위해서 타깃 빈의 프록시 객체를 생성한다.
		프록시 객체는 PlatformTransactionManager를 사용해 트랜잭션을 시작하고
		실제 객체의 메서드를 호출한다. 그리고 실제 객체의 메서드가 정상 종료되면 
		트랜잭션을 커밋하고 예외가 발생하게 되면 트랜잭션을 롤백하게 된다.
					
		주의사항 : 위에 정의한 transactionManager를 참조하지만 속성을 지정할 때
					transaction-manager-ref가 아니라는 것이다.	
	-->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!--  
		9. 코드기반 트랜잭션을 처리하기 위해서는 스프링이 지원하는
		   TransactionTemplate을 Spring Bean으로 정의		
		
		스프링의 트랜잭션 지원 기능을 사용해 트랜잭션을 코드에서 직접 처리할 경우 트랜잭션
		매니저를 직접 사용하는 경우는 드물고 TransactionTemplate 클래스를 사용한다.
		TransactionTemplate 클래스는 PlatformTransactionManager를 이용해
		트랜잭션과 관련된 트랜잭션 시작, 커밋, 롤백을 처리해 주는 템플릿 클래스 이다. 
		이 클래스는 아래와 같은 속성을 갖는다.
		
		* propagationBehaviorName(propagationBehavior) : 트랜잭션 전파 속성					
		  트랜잭션을 시작할 때 새로운 트랜잭션을 시작할 지 기존에 이미 시작된 트랜잭션을
		  사용할지 아니면 트랜잭션을 적용하지 않을지 등을 지정하는 속성으로 트랜잭션 전파
		  범위(트랜잭션의 경계)는 아래와 같은 값을 지정할 수 있다. 
		  propagationBehavior 속성에는 () 안의 숫자를 지정할 수 있다.
			
			- PROPAGATION_REQUIRED(0) -> Default
			  트랜잭션이 필요하다는 것을 의미 하며 현재 진행중인 트랜잭션 안에서
			  실행되면 기존의 트랜잭션을 사용하고 진행중인 트랜잭션이 없으며 새로운
			  트랜잭션을 시작한다.
			
			- PROPAGATION_SUPPORTS(1)
			  트랜잭션이 필요하지 않지만 현재 진행중인 트랜잭션이 존재하면 기존 트랜
			  잭션을 사용하고 진행 중인 트랜잭션이 없어도 익셉션은 발생되지 않는다. 
			 
			- PROPAGATION_MANDATORY(2)
			  트랜잭션이 필요하다는 것을 의미 하지만 PROPAGATION_REQUIRED와는 
			  달리 현재 진행중인 트랜잭션이 존재하지 않으면 익셉션이 발생한다.
			
			- PROPAGATION_REQUIRES_NEW(3)
			  현재 진행중인 트랜잭션이 존재하면 기존 트랜잭션을 현재 상태에서 대기
			  시키고 새로운 트랜잭션을 시작한다. 새로운 트랜잭션이 종료되어야 기존의
			  트랜잭션이 이어서 시작 된다. 이 옵션을 적용하면 항상 새로운 트랜잭션으로
			  시작한다.
			  
			- PROPAGATION_NOT_SUPPORTED(4)
			  트랜잭션이 필요하지 않음을 의미하며 현재 진행중인 트랜잭션 안에서 실행
			  되면 진행중인 트랜잭션을 현재 상태에서 대기 시키고 메서드가 종료된 후에
			  기존의 트랜잭션을 재기한다.   
			  
			- PROPAGATION_NEVER(5)
			  트랜잭션이 필요하지 않음을 의미하며 현재 진행중인 트랜잭션이 존재하면
			  익셉션이 발생한다.
			
			- PROPAGATION_NESTED(6)
			  현재 진행중인 트랜잭션이 존재하면 기존 트랜잭션에 중첩된 트랜잭션에서
			  실행된다. 기존 트랜잭션이 존재하지 않으면 PROPAGATION_REQUIRED
			  동일하다. JDBC 3.0 드라이버를 사용할 때 적용된다.    
		
		* isolationLevelName(isolationLevel) : 트랜잭션 격리 속성
			트랜잭션이 병행되어 실행될 때 데이터 접근에 대한 격리 수준을 지정하는 속성
			isolationLevel에는 () 안의 값을 지정할 수 있다.
			
			- ISOLATION_DEFAULT(-1) -> Default
			  데이터베이스가 제공하는 기본 값을 사용한다.
			
			- ISOLATION_READ_UNCOMMITTED(1)
			  다른 트랜잭션에 의해 변경되고 아직 커밋되지 않은 데이터를 읽어 올 수
			  있다.
			  
			- ISOLATION_READ_COMMITTED(2)
			  다른 트랜잭션에 의해 커밋된 데이터를 읽어 올 수 있다. 
			
			- ISOLATION_REPEATABLE_READ(4)
			  트랜잭션에서 여러 번 데이터를 읽어 올 때 다른 트랜잭션에서 데이터를
			  변경해도 같은 값을 읽어 온다.
			
			- ISOLATION_SERIALIZABLE(8)
			  실행중인 트랜잭션을 순서대로 처리해 동시에 동일한 데이터에 접근할 수
			  없도록 격리 시킨다.			
					
		* timeout : 트랜잭션 타임아웃 속성		
			트랜잭션 타임아웃 값을 초 단위로 지정, 기본 값은 -1로 타임아웃이 없다.
			
		* readOnly : 트랜잭션이 읽기전용 인지 지정하는 속성
			읽기 전용 트랜잭션 여부를 지정하는 속성, 기본 값은 false로 읽고 쓰기
			트랜잭션 이다.		
	-->
	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate"
		p:transactionManager-ref="transactionManager" 
		p:propagationBehavior="0"/>

		
	<!--
		11. Commons FileUpload API를 지원하기 위해 스프링프레임워크가
		     제공하는 CommonsMultipartResolver를 Bean으로 정의
		     
		파일 업로드를 위해 스프링이 제공하는 멀티파트 지원 기능을 사용하려면 
		MultipartResolver를 스프링 설정 파일에 빈으로 등록해야 한다. 
		MultipartResolver는 멀티파트 형식으로 encoding된 데이터가
		전송된 경우 해당 데이터를 스프링 MVC에서 사용할 수 있도록 변환하는
		역할을 한다. 예를 들자면 @RequestParam 애노테이션을 이용해
		멀티파트로 전송된 파라미터 값과 파일 데이터를 사용할 수 있게 해준다.
		 
		스프링에서 기본 제공하는 MultipartResolver는 아래 두 개가 있다.
		이 두 개의 MultipartResolver 구현체 중 사용하고자 하는 클래스를
		스프링 빈으로 등록하면 된다.  한 가지 주의할 점은 빈의 이름(id)은 
		반드시 multipartResolver 로 지정해야 한다는 것이다.
		DispatcherServlet이 이 이름을 가진 빈을 찾아 사용하기 때문에 다른
		이름을 지정할 경우 MultipartResolver로 사용되지 못한다. 
		 
		- Commons FileUpload API를 사용해 멀티파트 데이터를 처리할 경우
		org.springframework.web.multipart.commons.CommonsMultipartResolver
		 
		- 서블릿 3.0의 Part를 사용해 멀티파트 데이터를 처리할 경우
		org.springframework.web.multipart.support.StandardServletMultipartResolver
		 
		아래는 CommonsMultipartResolver 클래스에서 많이 사용하는 프로퍼티의 설명이다.
		- maxUploadSize
		최대 업로드 가능한 파일의 바이트 크기로 업로드 하는 파일의 크기를 
		제한하지 않으려면 -1을 지정하면 된다. 기본 값은 -1 이다.
		 
		- maxInMemorySize
		디스크에 임시 파일을 생성하기 전에 메모리에 보관할 수 있는 최대 바이트
		크기로 기본 값은 10240Byte 이다.
		 
		- defaultEncoding
		요청을 파싱할 때 사용할 문자 셋으로 지정하지 않을 경우 
		HttpServletRequest.setCharacterEncoding() 메소드로 지정한
		문자 셋이 적용된다. 기본 값은 ISO-8859-1이 적용된다. 
	-->
	<bean id="multipartResolver" class=
		"org.springframework.web.multipart.commons.CommonsMultipartResolver" />
		
	<!-- 
		## MessageSource 정의하기 ##
		View 페이지에서 사용할 타이틀을 properties 파일에 저장하여 관리하기
		위해 ResourceBundleMessageSource를 정의한다.
		ResourceBundleMessageSource의 basenames 속성에 <value>
		태그에 지정하는 값은 properties 파일 이름으로 확장자를 제외한 파일명을
		지정하면 된다. 아래에서 titleMessges로 지정 하였으므로 지정한 경로에서
		titleMessages.properties를 읽는다.
	-->
	<bean id="messageSource" class=
		"org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>				
				<value>messages/titleMessages</value>
			</list>
		</property>
	</bean>		
</beans>
