<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	맵퍼의 namespace 속성은 맵핑 구문을 그룹핑 하는 역할을 한다.
	여러 맵퍼에서 맵핑 구문의 id 속성 값이 중복되더라도 namespace와
	맵핑 구문의 id 속성에 지정한 값을 합쳐서 호출하기 때문에 맵핑 구문이
	중복되지 않게 분류하여 관리할 수 있다.
	테이블 이름을 바탕으로 namespace를 지정하고 맵핑 구문의 id 속성의
	값은 SQL 문의 맥락에 따라서 명명하는 것이 일반적 이다.
	
	parameterType 속성에는 주로 SQL 문의 조건에 사용할 파라미터의
	데이터 타입을 지정하는 속성으로 자바 원시 타입(기본 타입, String)과 자바빈,
	Map과 같은 타입을 지정할 수 있다. resultType 속성도 parameterType
	속성에서 지정한 타입을 많이 사용한다. parameterType과 resultType에
	지정할 데이터 타입이 자바 원시 타입이면 생략해도 잘 동작한다.
	
	SQL문의 조건에 사용할 파라미터는 아래와 같이 #{} 로 감싸서 지정하면 된다.
-->
<mapper namespace="com.springstudy.mappers.MemberMapper" >
	<!--
		회원 로그인시 id에 해당하는 pass를 반환하는 맵핑 구문
		테이블의 컬럼명은 일반적으로 언더스코어 표기법("_")을 사용하는 경우가
		많고 클래스의 인스턴스 맴버는 카멜표기법을 사용한다.
		테이블의 컬럼명과 모델 클래스의 프로퍼티 이름이 다른 경우 아래와 같이
		SELECT 쿼리에 별칭을 사용해 모델 클래스의 프로퍼티 이름과 동일하게
		맞춰야 한다. 그렇지 않으면 오류는 발생하지 않지만 데이터를 읽어 올
		수 없다. 하지만 MyBatis 설정 파일에서 <settings> 요소의 하부 요소로
		<setting name="mapUnderscoreToCamelCase" value="true" />를
		지정하면 별칭을 사용하지 않아도 언더스코어 표기법을 카멜 표기법으로
		매핑해서 간편하게 자바 모델 객체로 변환할 수 있다.
		
		root-context.xml에서 SqlSessionFactoryBean을 Spring Bean으로
		정의할 때 typeAliasesPackage 프로퍼티 속성에 com.springstudy.ch05.domain
		으로 정의했기 때문 resultType 속성에 클래스 이름으로 별칭을 지정했다. 
		typeAliasesPackage나 typeAliase를 설정하지 않았다면 패키지를
		포함한 완전한 클래스 이름을 지정해야 한다.
		
		SQL문의 조건에 사용할 파라미터는 아래와 같이 #{} 로 감싸서 지정하면 된다.
		#{} 안에 지정하는 변수이름은 DAO에서 이 맵핑 구문을 호출할 때 인수로
		지정하는 이름과 같아야 한다. 
	-->
	<select id="login" resultType="Member">
		SELECT pass FROM member WHERE id = #{id}
	</select>
	
	<!--
		회원 id에 해당하는 회원 정보를 반환하는 맵핑 구문
		테이블의 컬럼명은 일반적으로 언더스코어 표기법("_")을 사용하는 경우가
		많고 클래스의 인스턴스 맴버는 카멜표기법을 사용한다.
		테이블의 컬럼명과 모델 클래스의 프로퍼티 이름이 다른 경우 아래와 같이
		SELECT 쿼리에 별칭을 사용해 모델 클래스의 프로퍼티 이름과 동일하게
		맞춰야 한다. 그렇지 않으면 오류는 발생하지 않지만 데이터를 읽어 올
		수 없다. 하지만 MyBatis 설정 파일에서 <settings> 요소의 하부 요소로
		<setting name="mapUnderscoreToCamelCase" value="true" />를
		지정하면 별칭을 사용하지 않아도 언더스코어 표기법을 카멜 표기법으로
		매핑해서 간편하게 자바 모델 객체로 변환할 수 있다.
		
		SELECT member_id AS memberId FROM Member
	-->
	<select id="getMember" resultType="Member">
		SELECT * FROM member WHERE id = #{id}
	</select>
	
	<!--
		회원 정보를 추가하는 맵핑 구문  
	-->
	<insert id="addMember" parameterType="Member">
		INSERT INTO member 		
		VALUES(#{id}, #{name}, #{pass}, #{email}, 
				#{mobile}, #{zipcode}, #{address1}, #{address2}, 
				#{phone}, #{emailGet}, SYSDATE())
	</insert>
	
	<!--
		회원 테이블에서 id에 해당하는 비밀번호를 가져오는 맵핑 구문
	
		아래는 DAO 클래스의 memberPassCheck(int no, String pass)
		메서드에서 사용하는 맵핑 구문으로 DAO에서 회원 id에 해당하는 비밀번호를 
		조회할 때 selectOne() 메서드의 두 번째 인수로 기본형인 id를 지정했기
		때문에 parameterType은 생략할 수 있다.
				
		SQL문의 조건에 사용할 파라미터는 아래와 같이 #{} 로 감싸서 지정하면 된다. 
	-->
	<select id="memberPassCheck" resultType="String">
		SELECT 
			pass
		FROM member
		WHERE id = #{id}
	</select>
	
	<!--
		회원 정보를 수정하는 맵핑 구문  
	-->
	<update id="updateMember" parameterType="Member">
		UPDATE member 
			SET pass=#{pass}, email=#{email}, mobile=#{mobile},		 
				zipcode=#{zipcode}, address1=#{address1}, address2=#{address2}, 
				phone=#{phone}, email_get=#{emailGet}, reg_date=SYSDATE()
	</update>		
</mapper>	



